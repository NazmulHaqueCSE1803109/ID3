# -*- coding: utf-8 -*-
"""Lab1_AI(22-10-22).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11wwfGSJnB0FbwrqeveY5KvkNMEso3s0U
"""

import numpy as np
import pandas as pd
eps = np.finfo(float).eps

dataset={
           'Age':['36-55','18-35','36-55','18-35','<18','18-35','36-55','36-55','36-55','>55','36-55','>55','<18','36-55','36-55','<18','18-35','>55','>55','36-55',],
           'Education':['Masters','High School','Masters','Bachelors','High School','Bachelors','Bachelors','Bachelors','Masters','Masters','Masters','Masters','High School','Masters','High School','High School','Bachelors','High School','Bachelors','High School',],
           'Income':['High','Low','Low','High','Low','High','Low','High','Low','Low','High','High','High','Low','Low','Low','High','High','Low','High',],
           'Marrital_Status':['Single','Single','Single','Single','Single','Married','Married','Single','Married','Married','Single','Single','Single','Single','Single','Married','Married','Married','Single','Married',],
           'Buy_Computer': ['Yes','No','Yes','No','Yes','No','No','Yes','No','Yes','Yes','Yes','No','Yes','Yes','Yes','No','Yes','Yes','No',]
        }
df = pd.DataFrame(dataset,columns=['Age','Education','Income','Marrital_Status','Buy_Computer'])

df

import pandas as pd
import numpy as np
eps = np.finfo(float).eps

path = "/content/DT.csv.txt"

df = pd.read_csv(path)

df

"""# New Section"""

class_entropy=0
values=df.Buy_Computer.unique()
for value in values:
  prob=df.Buy_Computer.value_counts()[value]/len(df.Buy_Computer)
  class_entropy +=-prob*np.log2(prob)

class_entropy

attribute='Age'
class_attribute_values=df.Buy_Computer.unique()
variables = df[attribute].unique()
age_entropy=0
for variable in variables:
  each_attribute_entropy=0
  for class_attribute_value in class_attribute_values:
    numerator=len(df[attribute][df[attribute]==variable][df.Buy_Computer==class_attribute_value])
    denominator=len(df[attribute][df[attribute]==variable])
    prob1=numerator/(denominator+eps)
    each_attribute_entropy +=-prob1*np.log2(prob1+eps)
  prob2=denominator/len(df)
  age_entropy +=prob2*each_attribute_entropy

age_entropy

IG_Age=class_entropy-age_entropy

IG_Age

attribute='Education'
class_attribute_values=df.Buy_Computer.unique()
variables = df[attribute].unique()
education_entropy=0
for variable in variables:
  each_attribute_entropy=0
  for class_attribute_value in class_attribute_values:
    numerator=len(df[attribute][df[attribute]==variable][df.Buy_Computer==class_attribute_value])
    denominator=len(df[attribute][df[attribute]==variable])
    prob1=numerator/(denominator+eps)
    each_attribute_entropy +=-prob1*np.log2(prob1+eps)
  prob2=denominator/len(df)
  education_entropy +=prob2*each_attribute_entropy

education_entropy

IG_Education = class_entropy-education_entropy

IG_Education

attribute='Income'
class_attribute_values=df.Buy_Computer.unique()
variables = df[attribute].unique()
income_entropy=0
for variable in variables:
  each_attribute_entropy=0
  for class_attribute_value in class_attribute_values:
    numerator=len(df[attribute][df[attribute]==variable][df.Buy_Computer==class_attribute_value])
    denominator=len(df[attribute][df[attribute]==variable])
    prob1=numerator/(denominator+eps)
    each_attribute_entropy +=-prob1*np.log2(prob1+eps)
  prob2=denominator/len(df)
  income_entropy +=prob2*each_attribute_entropy

income_entropy

IG_Income = class_entropy-income_entropy

IG_Income

attribute='Marrital_Status'
class_attribute_values=df.Buy_Computer.unique()
variables = df[attribute].unique()
marrital_status_entropy=0
for variable in variables:
  each_attribute_entropy=0
  for class_attribute_value in class_attribute_values:
    numerator=len(df[attribute][df[attribute]==variable][df.Buy_Computer==class_attribute_value])
    denominator=len(df[attribute][df[attribute]==variable])
    prob1=numerator/(denominator+eps)
    each_attribute_entropy +=-prob1*np.log2(prob1+eps)
  prob2=denominator/len(df)
  marrital_status_entropy +=prob2*each_attribute_entropy

marrital_status_entropy

IG_Income = class_entropy-marrital_status_entropy

IG_Income



#decision tree
def class_entropy(df):
    class_attribute = df.keys()[-1] 
    C_entropy = 0
    values = df[class_attribute].unique()
    for value in values:
        prob = df[class_attribute].value_counts()[value]/len(df[class_attribute])
        C_entropy += -prob*np.log2(prob)
    return C_entropy

def attribute_entropy(df,attribute):
    class_attribute = df.keys()[-1] 
    class_attribute_values = df[class_attribute].unique() 
    variables = df[attribute].unique()   
    attrb_entropy=0
    for variable in variables:
        each_attribute_entropy=0
        for class_attribute_value in class_attribute_values:
            numerator = len(df[attribute][df[attribute]==variable][df[class_attribute] ==class_attribute_values])
            denominator = len(df[attribute][df[attribute]==variable])
            prob1 =  numerator/(denominator+eps)
            each_attribute_entropy += -prob1*np.log2(prob1+eps)
        prob2 = denominator/len(df)
        attrb_entropy += -prob2*each_attribute_entropy
    return abs(attrb_entropy)

def find_winner(df):
    Entropy_att = []
    IG = []
    for key in df.keys()[:-1]:
        IG.append(class_entropy(df)-attribute_entropy(df,key))
    return df.keys()[:-1][np.argmax(IG)]
  
def create_subtable(df, node,value):
    return df[df[node] == value].reset_index(drop=True)

def buildTree(df,tree=None): 
    Class = df.keys()[-1]   
    
    node = find_winner(df)
   
    attValue = np.unique(df[node])
    
    if tree is None:                    
        tree={}
        tree[node] = {}
     

    for value in attValue:
        
        subtable = create_subtable(df,node,value)
        clValue,counts = np.unique(subtable['Buy_Computer'],return_counts=True)                        
        
        if len(counts)==1:
            tree[node][value] = clValue[0]                                                    
        else:        
            tree[node][value] = buildTree(subtable) 
                   
    return tree

import pprint

tree = buildTree(df)

pprint.pprint(tree)

#Prediction Function
def predict(inst,tree):

    for nodes in tree.keys():        
        
        value = inst[nodes]
        tree = tree[nodes][value]
        prediction = 0
            
        if type(tree) is dict:
            prediction = predict(inst, tree)
        else:
            prediction = tree
            break;

inst = df.iloc[6]

inst